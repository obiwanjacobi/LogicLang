//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CuplParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Jacobi.CuplLang.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class CuplParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Comments=1, Assembly=2, Company=3, Date=4, Designer=5, Device=6, Format=7, 
		Location=8, Name=9, Partno=10, Revision=11, Pin=12, Append=13, Extension=14, 
		DeviceName=15, FormatName=16, Symbol=17, Number=18, DontCareNumber=19, 
		PrefixHex=20, PrefixOctal=21, PrefixDecimal=22, PrefixBinary=23, Include=24, 
		Define=25, UnDef=26, IfDef=27, IfNotDef=28, EndIf=29, Else=30, Repeat=31, 
		RepEnd=32, Macro=33, MEnd=34, Eq=35, LogicNot=36, LogicAnd=37, LogicOr=38, 
		SemiColon=39, Comma=40, Dot=41, Range=42, BracketOpen=43, BracketClose=44, 
		ParenOpen=45, ParenClose=46, Dollar=47, Quote=48, WS=49, EndUseSpaces=50, 
		FreeText=51;
	public const int
		RULE_file = 0, RULE_header = 1, RULE_assembly = 2, RULE_company = 3, RULE_date = 4, 
		RULE_designer = 5, RULE_device = 6, RULE_format = 7, RULE_location = 8, 
		RULE_name = 9, RULE_partno = 10, RULE_revision = 11, RULE_freeText = 12, 
		RULE_pin = 13, RULE_numberOrListOrRange = 14, RULE_symbolOrListOrRange = 15, 
		RULE_numberList = 16, RULE_numberRange = 17, RULE_symbolList = 18, RULE_symbolRange = 19, 
		RULE_equation = 20, RULE_expression = 21, RULE_extension = 22, RULE_binOp = 23, 
		RULE_uniOp = 24;
	public static readonly string[] ruleNames = {
		"file", "header", "assembly", "company", "date", "designer", "device", 
		"format", "location", "name", "partno", "revision", "freeText", "pin", 
		"numberOrListOrRange", "symbolOrListOrRange", "numberList", "numberRange", 
		"symbolList", "symbolRange", "equation", "expression", "extension", "binOp", 
		"uniOp"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'INCLUDE'", "'DEFINE'", "'UNDEF'", "'IFDEF'", "'IFNDEF'", "'ENDIF'", 
		"'ELSE'", "'REPEAT'", "'REPEND'", "'MACRO'", "'MEND'", "'='", "'!'", "'&'", 
		"'#'", null, "','", "'.'", "'..'", "'['", "']'", "'('", "')'", "'$'", 
		"'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comments", "Assembly", "Company", "Date", "Designer", "Device", 
		"Format", "Location", "Name", "Partno", "Revision", "Pin", "Append", "Extension", 
		"DeviceName", "FormatName", "Symbol", "Number", "DontCareNumber", "PrefixHex", 
		"PrefixOctal", "PrefixDecimal", "PrefixBinary", "Include", "Define", "UnDef", 
		"IfDef", "IfNotDef", "EndIf", "Else", "Repeat", "RepEnd", "Macro", "MEnd", 
		"Eq", "LogicNot", "LogicAnd", "LogicOr", "SemiColon", "Comma", "Dot", 
		"Range", "BracketOpen", "BracketClose", "ParenOpen", "ParenClose", "Dollar", 
		"Quote", "WS", "EndUseSpaces", "FreeText"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CuplParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CuplParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CuplParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CuplParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinContext[] pin() {
			return GetRuleContexts<PinContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinContext pin(int i) {
			return GetRuleContext<PinContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			header();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 51;
				pin();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Pin );
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56;
				equation();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719616000L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyContext[] assembly() {
			return GetRuleContexts<AssemblyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyContext assembly(int i) {
			return GetRuleContext<AssemblyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyContext[] company() {
			return GetRuleContexts<CompanyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyContext company(int i) {
			return GetRuleContext<CompanyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignerContext[] designer() {
			return GetRuleContexts<DesignerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignerContext designer(int i) {
			return GetRuleContext<DesignerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceContext[] device() {
			return GetRuleContexts<DeviceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceContext device(int i) {
			return GetRuleContext<DeviceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext[] format() {
			return GetRuleContexts<FormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format(int i) {
			return GetRuleContext<FormatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext[] location() {
			return GetRuleContexts<LocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location(int i) {
			return GetRuleContext<LocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartnoContext[] partno() {
			return GetRuleContexts<PartnoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartnoContext partno(int i) {
			return GetRuleContext<PartnoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevisionContext[] revision() {
			return GetRuleContexts<RevisionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevisionContext revision(int i) {
			return GetRuleContext<RevisionContext>(i);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4092L) != 0)) {
				{
				State = 71;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assembly:
					{
					State = 61;
					assembly();
					}
					break;
				case Company:
					{
					State = 62;
					company();
					}
					break;
				case Date:
					{
					State = 63;
					date();
					}
					break;
				case Designer:
					{
					State = 64;
					designer();
					}
					break;
				case Device:
					{
					State = 65;
					device();
					}
					break;
				case Format:
					{
					State = 66;
					format();
					}
					break;
				case Location:
					{
					State = 67;
					location();
					}
					break;
				case Name:
					{
					State = 68;
					name();
					}
					break;
				case Partno:
					{
					State = 69;
					partno();
					}
					break;
				case Revision:
					{
					State = 70;
					revision();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assembly() { return GetToken(CuplParser.Assembly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public AssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyContext assembly() {
		AssemblyContext _localctx = new AssemblyContext(Context, State);
		EnterRule(_localctx, 4, RULE_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(Assembly);
			State = 77;
			freeText();
			State = 78;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Company() { return GetToken(CuplParser.Company, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public CompanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_company; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompany(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanyContext company() {
		CompanyContext _localctx = new CompanyContext(Context, State);
		EnterRule(_localctx, 6, RULE_company);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(Company);
			State = 81;
			freeText();
			State = 82;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date() { return GetToken(CuplParser.Date, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 8, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(Date);
			State = 85;
			freeText();
			State = 86;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Designer() { return GetToken(CuplParser.Designer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public DesignerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesigner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignerContext designer() {
		DesignerContext _localctx = new DesignerContext(Context, State);
		EnterRule(_localctx, 10, RULE_designer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(Designer);
			State = 89;
			freeText();
			State = 90;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Device() { return GetToken(CuplParser.Device, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeviceName() { return GetToken(CuplParser.DeviceName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CuplParser.SemiColon, 0); }
		public DeviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_device; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDevice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceContext device() {
		DeviceContext _localctx = new DeviceContext(Context, State);
		EnterRule(_localctx, 12, RULE_device);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(Device);
			State = 93;
			Match(DeviceName);
			State = 94;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Format() { return GetToken(CuplParser.Format, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FormatName() { return GetToken(CuplParser.FormatName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CuplParser.SemiColon, 0); }
		public FormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatContext format() {
		FormatContext _localctx = new FormatContext(Context, State);
		EnterRule(_localctx, 14, RULE_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(Format);
			State = 97;
			Match(FormatName);
			State = 98;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Location() { return GetToken(CuplParser.Location, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 16, RULE_location);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(Location);
			State = 101;
			freeText();
			State = 102;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(CuplParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 18, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(Name);
			State = 105;
			freeText();
			State = 106;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartnoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partno() { return GetToken(CuplParser.Partno, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public PartnoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartnoContext partno() {
		PartnoContext _localctx = new PartnoContext(Context, State);
		EnterRule(_localctx, 20, RULE_partno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(Partno);
			State = 109;
			freeText();
			State = 110;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Revision() { return GetToken(CuplParser.Revision, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndUseSpaces() { return GetToken(CuplParser.EndUseSpaces, 0); }
		public RevisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevisionContext revision() {
		RevisionContext _localctx = new RevisionContext(Context, State);
		EnterRule(_localctx, 22, RULE_revision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(Revision);
			State = 113;
			freeText();
			State = 114;
			Match(EndUseSpaces);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FreeText() { return GetTokens(CuplParser.FreeText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FreeText(int i) {
			return GetToken(CuplParser.FreeText, i);
		}
		public FreeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextContext freeText() {
		FreeTextContext _localctx = new FreeTextContext(Context, State);
		EnterRule(_localctx, 24, RULE_freeText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 116;
				Match(FreeText);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FreeText );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pin() { return GetToken(CuplParser.Pin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberOrListOrRangeContext numberOrListOrRange() {
			return GetRuleContext<NumberOrListOrRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(CuplParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CuplParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolOrListOrRangeContext symbolOrListOrRange() {
			return GetRuleContext<SymbolOrListOrRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicNot() { return GetToken(CuplParser.LogicNot, 0); }
		public PinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinContext pin() {
		PinContext _localctx = new PinContext(Context, State);
		EnterRule(_localctx, 26, RULE_pin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(Pin);
			State = 122;
			numberOrListOrRange();
			State = 123;
			Match(Eq);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LogicNot) {
				{
				State = 124;
				Match(LogicNot);
				}
			}

			{
			State = 127;
			symbolOrListOrRange();
			}
			State = 128;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOrListOrRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CuplParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public NumberOrListOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOrListOrRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOrListOrRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOrListOrRangeContext numberOrListOrRange() {
		NumberOrListOrRangeContext _localctx = new NumberOrListOrRangeContext(Context, State);
		EnterRule(_localctx, 28, RULE_numberOrListOrRange);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(Number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				numberList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				numberRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolOrListOrRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(CuplParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolListContext symbolList() {
			return GetRuleContext<SymbolListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolRangeContext symbolRange() {
			return GetRuleContext<SymbolRangeContext>(0);
		}
		public SymbolOrListOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolOrListOrRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolOrListOrRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolOrListOrRangeContext symbolOrListOrRange() {
		SymbolOrListOrRangeContext _localctx = new SymbolOrListOrRangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_symbolOrListOrRange);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135;
				Match(Symbol);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				symbolList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				symbolRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(CuplParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(CuplParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(CuplParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(CuplParser.BracketClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CuplParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CuplParser.Comma, i);
		}
		public NumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberListContext numberList() {
		NumberListContext _localctx = new NumberListContext(Context, State);
		EnterRule(_localctx, 32, RULE_numberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(BracketOpen);
			State = 141;
			Match(Number);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 142;
				Match(Comma);
				State = 143;
				Match(Number);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(CuplParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(CuplParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(CuplParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Range() { return GetToken(CuplParser.Range, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(CuplParser.BracketClose, 0); }
		public NumberRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberRangeContext numberRange() {
		NumberRangeContext _localctx = new NumberRangeContext(Context, State);
		EnterRule(_localctx, 34, RULE_numberRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(BracketOpen);
			State = 152;
			Match(Number);
			State = 153;
			Match(Range);
			State = 154;
			Match(Number);
			State = 155;
			Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(CuplParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Symbol() { return GetTokens(CuplParser.Symbol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol(int i) {
			return GetToken(CuplParser.Symbol, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(CuplParser.BracketClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CuplParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CuplParser.Comma, i);
		}
		public SymbolListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolListContext symbolList() {
		SymbolListContext _localctx = new SymbolListContext(Context, State);
		EnterRule(_localctx, 36, RULE_symbolList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(BracketOpen);
			State = 158;
			Match(Symbol);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 159;
				Match(Comma);
				State = 160;
				Match(Symbol);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166;
			Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(CuplParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(CuplParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Range() { return GetToken(CuplParser.Range, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CuplParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(CuplParser.BracketClose, 0); }
		public SymbolRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolRangeContext symbolRange() {
		SymbolRangeContext _localctx = new SymbolRangeContext(Context, State);
		EnterRule(_localctx, 38, RULE_symbolRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(BracketOpen);
			State = 169;
			Match(Symbol);
			State = 170;
			Match(Range);
			State = 171;
			Match(Number);
			State = 172;
			Match(BracketClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(CuplParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(CuplParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CuplParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Append() { return GetToken(CuplParser.Append, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicNot() { return GetToken(CuplParser.LogicNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext extension() {
			return GetRuleContext<ExtensionContext>(0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 40, RULE_equation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Append) {
				{
				State = 174;
				Match(Append);
				}
			}

			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LogicNot) {
				{
				State = 177;
				Match(LogicNot);
				}
			}

			State = 180;
			Match(Symbol);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 181;
				extension();
				}
			}

			State = 184;
			Match(Eq);
			State = 185;
			expression(0);
			State = 186;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(CuplParser.Symbol, 0); }
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniOpContext uniOp() {
			return GetRuleContext<UniOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNumberContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CuplParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DontCareNumber() { return GetToken(CuplParser.DontCareNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixHex() { return GetToken(CuplParser.PrefixHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixBinary() { return GetToken(CuplParser.PrefixBinary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixDecimal() { return GetToken(CuplParser.PrefixDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixOctal() { return GetToken(CuplParser.PrefixOctal, 0); }
		public ExpressionNumberContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinOpContext binOp() {
			return GetRuleContext<BinOpContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(CuplParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(CuplParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LogicNot:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 189;
				uniOp();
				State = 190;
				expression(4);
				}
				break;
			case ParenOpen:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 192;
				Match(ParenOpen);
				State = 193;
				expression(0);
				State = 194;
				Match(ParenClose);
				}
				break;
			case Symbol:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196;
				Match(Symbol);
				}
				break;
			case Number:
			case DontCareNumber:
			case PrefixHex:
			case PrefixOctal:
			case PrefixDecimal:
			case PrefixBinary:
				{
				_localctx = new ExpressionNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) {
					{
					State = 197;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 200;
				_la = TokenStream.LA(1);
				if ( !(_la==Number || _la==DontCareNumber) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 203;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 204;
					binOp();
					State = 205;
					expression(6);
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CuplParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extension() { return GetToken(CuplParser.Extension, 0); }
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 44, RULE_extension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(Dot);
			State = 213;
			Match(Extension);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicAnd() { return GetToken(CuplParser.LogicAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicOr() { return GetToken(CuplParser.LogicOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar() { return GetToken(CuplParser.Dollar, 0); }
		public BinOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinOpContext binOp() {
		BinOpContext _localctx = new BinOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_binOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 141149805215744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicNot() { return GetToken(CuplParser.LogicNot, 0); }
		public UniOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICuplParserVisitor<TResult> typedVisitor = visitor as ICuplParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniOpContext uniOp() {
		UniOpContext _localctx = new UniOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_uniOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(LogicNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,51,220,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,4,0,53,8,0,11,0,12,0,54,1,0,4,0,
		58,8,0,11,0,12,0,59,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,72,8,1,
		10,1,12,1,75,9,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,4,12,118,8,12,11,12,12,
		12,119,1,13,1,13,1,13,1,13,3,13,126,8,13,1,13,1,13,1,13,1,14,1,14,1,14,
		3,14,134,8,14,1,15,1,15,1,15,3,15,139,8,15,1,16,1,16,1,16,1,16,5,16,145,
		8,16,10,16,12,16,148,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
		1,18,1,18,1,18,5,18,162,8,18,10,18,12,18,165,9,18,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,20,3,20,176,8,20,1,20,3,20,179,8,20,1,20,1,20,3,
		20,183,8,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,3,21,199,8,21,1,21,3,21,202,8,21,1,21,1,21,1,21,1,21,5,21,208,
		8,21,10,21,12,21,211,9,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,0,1,
		42,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,0,3,1,0,20,23,1,0,18,19,2,0,37,38,47,47,222,0,50,1,0,0,0,2,73,1,
		0,0,0,4,76,1,0,0,0,6,80,1,0,0,0,8,84,1,0,0,0,10,88,1,0,0,0,12,92,1,0,0,
		0,14,96,1,0,0,0,16,100,1,0,0,0,18,104,1,0,0,0,20,108,1,0,0,0,22,112,1,
		0,0,0,24,117,1,0,0,0,26,121,1,0,0,0,28,133,1,0,0,0,30,138,1,0,0,0,32,140,
		1,0,0,0,34,151,1,0,0,0,36,157,1,0,0,0,38,168,1,0,0,0,40,175,1,0,0,0,42,
		201,1,0,0,0,44,212,1,0,0,0,46,215,1,0,0,0,48,217,1,0,0,0,50,52,3,2,1,0,
		51,53,3,26,13,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,
		0,55,57,1,0,0,0,56,58,3,40,20,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,
		0,0,59,60,1,0,0,0,60,1,1,0,0,0,61,72,3,4,2,0,62,72,3,6,3,0,63,72,3,8,4,
		0,64,72,3,10,5,0,65,72,3,12,6,0,66,72,3,14,7,0,67,72,3,16,8,0,68,72,3,
		18,9,0,69,72,3,20,10,0,70,72,3,22,11,0,71,61,1,0,0,0,71,62,1,0,0,0,71,
		63,1,0,0,0,71,64,1,0,0,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,71,
		68,1,0,0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,
		74,1,0,0,0,74,3,1,0,0,0,75,73,1,0,0,0,76,77,5,2,0,0,77,78,3,24,12,0,78,
		79,5,50,0,0,79,5,1,0,0,0,80,81,5,3,0,0,81,82,3,24,12,0,82,83,5,50,0,0,
		83,7,1,0,0,0,84,85,5,4,0,0,85,86,3,24,12,0,86,87,5,50,0,0,87,9,1,0,0,0,
		88,89,5,5,0,0,89,90,3,24,12,0,90,91,5,50,0,0,91,11,1,0,0,0,92,93,5,6,0,
		0,93,94,5,15,0,0,94,95,5,39,0,0,95,13,1,0,0,0,96,97,5,7,0,0,97,98,5,16,
		0,0,98,99,5,39,0,0,99,15,1,0,0,0,100,101,5,8,0,0,101,102,3,24,12,0,102,
		103,5,50,0,0,103,17,1,0,0,0,104,105,5,9,0,0,105,106,3,24,12,0,106,107,
		5,50,0,0,107,19,1,0,0,0,108,109,5,10,0,0,109,110,3,24,12,0,110,111,5,50,
		0,0,111,21,1,0,0,0,112,113,5,11,0,0,113,114,3,24,12,0,114,115,5,50,0,0,
		115,23,1,0,0,0,116,118,5,51,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,
		1,0,0,0,119,120,1,0,0,0,120,25,1,0,0,0,121,122,5,12,0,0,122,123,3,28,14,
		0,123,125,5,35,0,0,124,126,5,36,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,
		127,1,0,0,0,127,128,3,30,15,0,128,129,5,39,0,0,129,27,1,0,0,0,130,134,
		5,18,0,0,131,134,3,32,16,0,132,134,3,34,17,0,133,130,1,0,0,0,133,131,1,
		0,0,0,133,132,1,0,0,0,134,29,1,0,0,0,135,139,5,17,0,0,136,139,3,36,18,
		0,137,139,3,38,19,0,138,135,1,0,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,
		31,1,0,0,0,140,141,5,43,0,0,141,146,5,18,0,0,142,143,5,40,0,0,143,145,
		5,18,0,0,144,142,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,
		0,147,149,1,0,0,0,148,146,1,0,0,0,149,150,5,44,0,0,150,33,1,0,0,0,151,
		152,5,43,0,0,152,153,5,18,0,0,153,154,5,42,0,0,154,155,5,18,0,0,155,156,
		5,44,0,0,156,35,1,0,0,0,157,158,5,43,0,0,158,163,5,17,0,0,159,160,5,40,
		0,0,160,162,5,17,0,0,161,159,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,
		164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,44,0,0,167,37,1,
		0,0,0,168,169,5,43,0,0,169,170,5,17,0,0,170,171,5,42,0,0,171,172,5,18,
		0,0,172,173,5,44,0,0,173,39,1,0,0,0,174,176,5,13,0,0,175,174,1,0,0,0,175,
		176,1,0,0,0,176,178,1,0,0,0,177,179,5,36,0,0,178,177,1,0,0,0,178,179,1,
		0,0,0,179,180,1,0,0,0,180,182,5,17,0,0,181,183,3,44,22,0,182,181,1,0,0,
		0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,5,35,0,0,185,186,3,42,21,0,186,
		187,5,39,0,0,187,41,1,0,0,0,188,189,6,21,-1,0,189,190,3,48,24,0,190,191,
		3,42,21,4,191,202,1,0,0,0,192,193,5,45,0,0,193,194,3,42,21,0,194,195,5,
		46,0,0,195,202,1,0,0,0,196,202,5,17,0,0,197,199,7,0,0,0,198,197,1,0,0,
		0,198,199,1,0,0,0,199,200,1,0,0,0,200,202,7,1,0,0,201,188,1,0,0,0,201,
		192,1,0,0,0,201,196,1,0,0,0,201,198,1,0,0,0,202,209,1,0,0,0,203,204,10,
		5,0,0,204,205,3,46,23,0,205,206,3,42,21,6,206,208,1,0,0,0,207,203,1,0,
		0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,43,1,0,0,0,211,
		209,1,0,0,0,212,213,5,41,0,0,213,214,5,14,0,0,214,45,1,0,0,0,215,216,7,
		2,0,0,216,47,1,0,0,0,217,218,5,36,0,0,218,49,1,0,0,0,16,54,59,71,73,119,
		125,133,138,146,163,175,178,182,198,201,209
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Jacobi.CuplLang.Parser
